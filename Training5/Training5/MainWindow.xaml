<Window x:Class="Training5.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        DataContext="{Binding Source={StaticResource Locator}, Path=Main}"
        xmlns:Converter="clr-namespace:Training5.Converter" 
        mc:Ignorable="d"
        Title="Training5 by Sascha Böck" Height="350" Width="525">
    <!--add the locator as static resource to bind datacontext to the mainvm
        addthe namespace of the converter-->

    <!--In case of using converters, you have to set it as windo.resource and define a key for it to use it in the xaml code-->
    <Window.Resources>
        <Converter:BoolToColorConverter x:Key="BoolToColorConverter"/>
    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="85*"/>
            <RowDefinition Height="25*"/>
        </Grid.RowDefinitions>

        <TabControl HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" Height="228" Width="498" BorderBrush="Black">
            <TabItem Header="Data" Width="100">
                <ItemsControl ItemsSource="{Binding Buttons}">
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal" Margin="2">
                                <!--Set a command parameter to hand over itself as parameter => jsut use binding-->
                                <!--If you have dynamic buttons created you have to set DataContext. before the property path of the relaycommand-->
                                <!--after binding to the relaycommand, set the relativesource to find the ancestor of a specified ancestor type-->
                                <!--in this case set RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}}"-->
                                <Button Margin="10,0,0,0" Content="toggle" Width="40" CommandParameter="{Binding}" Command="{Binding DataContext.ToggleBtnClicked, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}}"/>
                                <!--Bind the fill property of the ellipse to the state and convert this state (true or false) to a color (green or red) -->
                                <Ellipse Margin="10,0,0,0" Width="15" Height="15" Fill="{Binding State, Converter={StaticResource BoolToColorConverter}}" />
                            </StackPanel>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </TabItem>
            <TabItem Header="History" Width="100">
                <Grid>
                    <DataGrid ItemsSource="{Binding History}" AutoGenerateColumns="False">
                        <DataGrid.Columns>
                            <DataGridTextColumn Binding="{Binding Id}" ClipboardContentBinding="{x:Null}" Header="ID"/>
                            <DataGridTextColumn Binding="{Binding State}" ClipboardContentBinding="{x:Null}" Header="State"/>
                            <DataGridTextColumn Binding="{Binding Timestamp.Now, Mode=OneWay}" ClipboardContentBinding="{x:Null}" Header="Time"/>
                            <DataGridTextColumn Binding="{Binding Sender}" ClipboardContentBinding="{x:Null}" Header="Sender"/>
                        </DataGrid.Columns>
                    </DataGrid>
                </Grid>
            </TabItem>
        </TabControl>

        <Button Content="Listen" Command="{Binding ListenBtnClicked}" Grid.Row="1" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0,27,101.4,26.8" Width="65"/>
        <Button Content="Connect" Command="{Binding ConnectBtnClicked}" Grid.Row="1" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0,27,31.4,26.8" Width="65"/>

    </Grid>
</Window>
